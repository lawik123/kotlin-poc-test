import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.21'
    id "org.jetbrains.kotlin.frontend" version "0.0.45"
    id "org.jetbrains.kotlin.plugin.jpa" version "1.3.21"
    id 'kotlinx-serialization' version '1.3.21'
    id "org.gretty" version "2.3.1"
}

group 'kotlin-poc-test'
version '1.0-SNAPSHOT'

ext {
    web_dir = "web"
    resteasyVersion = "3.6.3.Final"
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url "https://dl.bintray.com/konform-kt/konform" }
    maven { url "https://kotlin.bintray.com/kotlin-js-wrappers" }
}

kotlin {
    jvm() {

    }
    js() {
        compilations.all {
            kotlinOptions {
                moduleKind = "commonjs"
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.10.0"
                implementation 'io.konform:konform-common:0.1.0'
            }
            languageSettings{
                useExperimentalAnnotation('kotlin.ExperimentalMultiplatform')
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.10.0"
                implementation "org.hibernate:hibernate-core:5.4.1.Final"
                implementation "org.postgresql:postgresql:42.2.5"
                implementation "org.jboss.resteasy:resteasy-jaxrs:$resteasyVersion"
                implementation "org.jboss.resteasy:resteasy-jaxb-provider:$resteasyVersion"
                implementation "org.jboss.resteasy:resteasy-servlet-initializer:$resteasyVersion"
                implementation "org.jboss.resteasy:resteasy-jackson2-provider:$resteasyVersion"
                implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.0'
                implementation "javax:javaee-api:8.0.1"
                implementation 'io.konform:konform:0.1.0'
                implementation 'com.jakewharton:jax-rs-kotlinx-serialization:0.2.1'
            }
            languageSettings{
                useExperimentalAnnotation('kotlin.ExperimentalMultiplatform')
            }
        }
        jsMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.10.0"
                implementation "io.ktor:ktor-client-js:1.1.3"
                implementation "io.ktor:ktor-client-json-js:1.1.3"
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.2.0'
                implementation 'io.konform:konform-js:0.1.0'
                implementation 'org.jetbrains:kotlin-react:16.6.0-pre.70-kotlin-1.3.21'
                implementation 'org.jetbrains:kotlin-react-dom:16.6.0-pre.70-kotlin-1.3.21'
                implementation 'org.jetbrains:kotlin-styled:1.0.0-pre.70-kotlin-1.3.21'
            }
            languageSettings{
                useExperimentalAnnotation('kotlinx.serialization.ImplicitReflectionSerializer')
                useExperimentalAnnotation('kotlin.ExperimentalMultiplatform')
            }
        }
    }

}

kotlinFrontend {
    npm {
        dependency "text-encoding"
        dependency "react"
        dependency "react-dom"
        dependency "core-js"
        dependency "inline-style-prefixer"
        dependency "styled-components"
    }

    sourceMaps = true

    webpackBundle {
        bundleName = "kotlin-poc-multiplatform"
    }
}

bundle.doLast() {
    copy {
        from "${buildDir}/processedResources/js/main/web"
        from "${buildDir}/bundle"
        into "${web_dir}"
    }
}

clean.doFirst() {
    delete("${web_dir}")
}

task copyJvmDependencies(type: Copy) {
    from configurations.jvmDefault
    into "${buildDir}/tmp/war/WEB-INF/lib"
}

task copyJvmClasses(type: Copy) {
    from "${buildDir}/classes/kotlin/jvm/main"
    into "${buildDir}/tmp/war/WEB-INF/classes"
}

task copyJvmResources(type: Copy){
    from "${buildDir}/processedResources/jvm/main"
    into "${buildDir}/tmp/war/WEB-INF/classes"
}

task war(type: Exec) {
    workingDir "${buildDir}/tmp/war"
    def commands = []
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commands = ['cmd', '/c']
    }
    commands.add("jar -cvf ${project.name}.war *")
    commandLine commands
}

war.doLast {
    copy {
        from "${buildDir}/tmp/war/${project.name}.war"
        into "${buildDir}/libs"
    }
}

copyJvmClasses.dependsOn jvmMainClasses

war.dependsOn copyJvmDependencies
war.dependsOn copyJvmClasses
war.dependsOn copyJvmResources

gretty {
    servletContainer = 'tomcat8'
    loggingLevel = 'debug'
    contextPath = '/'
}

farm {
    webapp "${buildDir}/tmp/war/${project.name}.war", contextPath: '/'
}

gradle.projectsEvaluated {
    farmRun.dependsOn war
    farmRunDebug.dependsOn war
}
